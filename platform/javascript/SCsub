#!/usr/bin/env python

Import("env")

javascript_files = [
    "audio_driver_javascript.cpp",
    "http_client_javascript.cpp",
    "javascript_eval.cpp",
    "javascript_main.cpp",
    "os_javascript.cpp",
    "api/javascript_tools_editor_plugin.cpp",
]

build_targets = ["#bin/godot-runtime${PROGSUFFIX}.js", "#bin/godot-runtime${PROGSUFFIX}.wasm"]
if env["threads_enabled"]: # TODO
    build_targets.append("#bin/godot${PROGSUFFIX}.worker.js")

env.Append(CCFLAGS=["-s", "ASSERTIONS=1"])
env.Append(LINKFLAGS=["-s", "ASSERTIONS=1"])
sys_env = env.Clone()
sys_env["LIBS"] = []
sys_env.Append(CCFLAGS=["-s", "MAIN_MODULE=1"])
sys_env.Append(LINKFLAGS=["-s", "MAIN_MODULE=1"])
sys_env["ENV"]["EMCC_FORCE_STDLIBS"] = "libc"  # Export for printf, malloc, ecc.
sys = sys_env.Program(build_targets, ["javascript_runtime.cpp"])

env.Append(CCFLAGS=["-s", "SIDE_MODULE=2"])
env.Append(LINKFLAGS=["-s", "SIDE_MODULE=2"])
wasm = env.add_program("#bin/godot${PROGSUFFIX}.wasm", javascript_files)

env.AddJSLibraries([
    "native/http_request.js",
    "native/library_godot_audio.js",
    "native/library_godot_display.js",
    "native/library_godot_os.js",
])

if env["tools"]:
    env.AddJSLibraries(["native/library_godot_editor_tools.js"])
if env["javascript_eval"]:
    env.AddJSLibraries(["native/library_godot_eval.js"])
for lib in env['JS_LIBS']:
    sys_env.Append(LINKFLAGS=["--js-library", lib])

sys_env.Depends(sys, env['JS_LIBS'])

engine = [
    "engine/preloader.js",
    "engine/utils.js",
    "engine/engine.js",
]
externs = [env.File("#platform/javascript/engine/externs.js")]
js_engine = env.CreateEngineFile("#bin/godot${PROGSUFFIX}.engine.js", engine, externs)
env.Depends(js_engine, externs)

wrap_list = [
    sys[0],
    js_engine,
]
js_wrapped = env.Textfile("#bin/godot", [env.File(f) for f in wrap_list], TEXTFILESUFFIX="${PROGSUFFIX}.wrapped.js")

zip_dir = env.Dir("#bin/.javascript_zip")
binary_name = "godot.tools" if env["tools"] else "godot"
out_files = [
    zip_dir.File(binary_name + ".js"),
    zip_dir.File(binary_name + "-runtime.wasm"),
    zip_dir.File(binary_name + ".wasm"),
    zip_dir.File(binary_name + ".html"),
]
html_file = "#misc/dist/html/editor.html" if env["tools"] else "#misc/dist/html/full-size.html"
in_files = [js_wrapped, sys[1], wasm, html_file]
if env["threads_enabled"]:
    in_files.append(sys[2])
    out_files.append(zip_dir.File(binary_name + ".worker.js"))

zip_files = env.InstallAs(out_files, in_files)
env.Zip(
    "#bin/godot",
    zip_files,
    ZIPROOT=zip_dir,
    ZIPSUFFIX="${PROGSUFFIX}${ZIPSUFFIX}",
    ZIPCOMSTR="Archiving $SOURCES as $TARGET",
)
